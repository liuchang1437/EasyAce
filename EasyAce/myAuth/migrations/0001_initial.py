# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-04 07:47
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(max_length=7)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(max_length=6)),
                ('phone', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=30)),
                ('school', models.CharField(max_length=50)),
                ('wechat', models.CharField(max_length=30)),
                ('whatsapp', models.CharField(max_length=30)),
                ('grade', models.CharField(max_length=20)),
                ('location', models.CharField(max_length=100)),
                ('loc_nego', models.CharField(max_length=20)),
                ('exam_type', models.CharField(max_length=50)),
                ('subjects', models.TextField()),
                ('duration_per_lesson', models.CharField(max_length=12)),
                ('start_time', models.CharField(max_length=8)),
                ('lesson_per_week', models.CharField(max_length=12)),
                ('prefer_tutor', models.CharField(max_length=7)),
                ('remarks', models.TextField()),
                ('weakness', models.TextField()),
                ('base_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(max_length=6)),
                ('phone', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=30)),
                ('birth', models.DateField()),
                ('school', models.CharField(max_length=50)),
                ('wechat', models.CharField(max_length=30)),
                ('whatsapp', models.CharField(max_length=30)),
                ('middle_test', models.CharField(max_length=50)),
                ('middle_test_score', models.TextField()),
                ('high_test', models.CharField(max_length=50)),
                ('high_test_score', models.TextField()),
                ('prefer_teach', models.TextField()),
                ('regions', models.CharField(max_length=30)),
                ('duration', models.CharField(max_length=12)),
                ('num_taught', models.CharField(max_length=10)),
                ('achievement', models.CharField(max_length=300)),
                ('base_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
