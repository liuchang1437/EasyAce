# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-08-14 09:24
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(max_length=7)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=50, verbose_name='Subjects')),
                ('attend', models.CharField(max_length=20, verbose_name='attendance')),
                ('attitude', models.CharField(max_length=10)),
                ('preparation', models.CharField(max_length=10)),
                ('clarity', models.CharField(max_length=10)),
                ('knowledgeability', models.CharField(max_length=10)),
                ('outcome', models.CharField(max_length=10)),
                ('time', models.FloatField(verbose_name='No. of Tuition Hours')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interview_presentability', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10')], default=0, max_length=2, verbose_name='Presentability')),
                ('interview_friendliness', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10')], default=0, max_length=2, verbose_name='Firendliness and care')),
                ('interview_crisis_hand', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10')], default=0, max_length=2, verbose_name='Crisis handling ability')),
                ('interview_communication', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10')], default=0, max_length=2, verbose_name='Communication Skill')),
                ('interview_grade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Year of Study')),
                ('interview_major', models.CharField(blank=True, max_length=100, null=True, verbose_name='Major')),
                ('interview_num_taught', models.CharField(blank=True, max_length=100, null=True, verbose_name='No. of Students Taught')),
                ('interview_effect', models.TextField(blank=True, null=True, verbose_name='Outcome')),
                ('interview_fees', models.CharField(blank=True, max_length=100, null=True, verbose_name='Fee Charged')),
                ('interview_how_to_range_course', models.TextField(blank=True, null=True, verbose_name='How do you arrange a two-hour class?')),
                ('interview_tutor_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Character/Type')),
                ('interview_why_you_good', models.TextField(blank=True, null=True, verbose_name='Why are you a good tutor?')),
                ('interview_how_relation_with_stu', models.TextField(blank=True, null=True, verbose_name='How do you manage your relationship with students?')),
                ('interview_how_rel_with_prntofstu', models.TextField(blank=True, null=True, verbose_name='How do you manage your relationship with parents?')),
                ('interview_how_long', models.CharField(blank=True, max_length=100, null=True, verbose_name='How long do you plan to teach?')),
                ('interview_why_tutor', models.TextField(blank=True, null=True, verbose_name='Why do you want to become a tutor? (Motive)')),
                ('interview_what_matter', models.TextField(blank=True, null=True, verbose_name='What kind of students would you like or not like to teach? Prioritize the criteria')),
                ('interview_other_sub', models.TextField(blank=True, null=True, verbose_name='Can you teach some other subjects with tutor shortage? (Give a few choices based on the situation; remind the interviewee about potential higher earnings)')),
                ('interview_can_teach_tutor', models.TextField(blank=True, null=True, verbose_name='Do you know tutors who can teach the above-mentioned subjects?')),
                ('interview_recommend', models.TextField(blank=True, null=True, verbose_name='Can you provide trainings for unexperienced tutors?')),
                ('interview_new_tutor_training', models.TextField(blank=True, null=True, verbose_name='Do you need newbie training? ')),
                ('interview_comment', models.TextField(blank=True, null=True, verbose_name='Comments by Interviewer')),
                ('interview_remark', models.TextField(blank=True, null=True, verbose_name='Others')),
            ],
        ),
        migrations.CreateModel(
            name='OptionalTutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tutor_consent', models.BooleanField(default=False, verbose_name="Tutor's consent")),
            ],
        ),
        migrations.CreateModel(
            name='PreferSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(default='Not chosen', max_length=30)),
                ('name', models.CharField(default='Not chosen', max_length=30, verbose_name='subject')),
                ('rank', models.IntegerField(editable=False)),
                ('other', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ReferSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(default='Not chosen', max_length=30)),
                ('name', models.CharField(default='Not chosen', max_length=30, verbose_name='subject')),
                ('score', models.CharField(default='0', max_length=20)),
                ('rank', models.IntegerField(editable=False)),
                ('other', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30, verbose_name='username')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('full_name', models.CharField(max_length=100, verbose_name='name')),
                ('gender', models.CharField(max_length=6)),
                ('email', models.CharField(max_length=40, verbose_name='email address')),
                ('phone', models.CharField(max_length=20)),
                ('school', models.CharField(max_length=50)),
                ('grade', models.CharField(max_length=20)),
                ('wechat', models.CharField(blank=True, max_length=30, null=True)),
                ('whatsapp', models.CharField(blank=True, max_length=30, null=True)),
                ('signup_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Signup date')),
                ('last_edit_time', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('location', models.CharField(max_length=100)),
                ('loc_nego', models.CharField(max_length=20, verbose_name='If tuition location negotiable')),
                ('prefer_tutor_gender', models.CharField(max_length=7, verbose_name='preference about tutor')),
                ('wait_match', models.BooleanField(default=True, verbose_name='等待分配教师')),
                ('intent_cnt', models.IntegerField(default=0)),
                ('base_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='StudentIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent_level', models.CharField(max_length=30)),
                ('intent_subject', models.CharField(max_length=30)),
                ('intent_subject_other', models.BooleanField(default=False)),
                ('intent_duration_per_lesson', models.CharField(max_length=12, verbose_name='time per lesson')),
                ('intent_lesson_per_week', models.CharField(max_length=12, verbose_name='lesson per week')),
                ('intent_start_time', models.CharField(max_length=20, verbose_name='start time')),
                ('intent_start_time_other', models.DateField(blank=True, null=True, verbose_name='start time(other)')),
                ('intent_remark1', models.CharField(blank=True, max_length=100, null=True)),
                ('intent_remark2', models.CharField(blank=True, max_length=100, null=True)),
                ('intent_remark3', models.CharField(blank=True, max_length=100, null=True)),
                ('intent_remark4', models.CharField(blank=True, max_length=100, null=True)),
                ('intent_remark5', models.CharField(blank=True, max_length=100, null=True)),
                ('intent_remark6', models.CharField(blank=True, max_length=200, null=True)),
                ('intent_weakness', models.TextField(blank=True, null=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('intent_tutor_id', models.IntegerField(blank=True, null=True)),
                ('last_edit_time', models.DateTimeField(auto_now=True)),
                ('feedback_status', models.CharField(default='not time', max_length=20)),
                ('if_confirmed', models.BooleanField(default=False, verbose_name="Tutor's Consent")),
                ('startdate', models.DateField(blank=True, default=django.utils.timezone.now, verbose_name='Contract Signing Date')),
                ('chargedate', models.DateField(blank=True, null=True, verbose_name='Commission Due Date')),
                ('service_fees', models.CharField(blank=True, max_length=20, null=True, verbose_name='Total Commission Fee')),
                ('freq', models.CharField(blank=True, max_length=30, null=True, verbose_name='Actual no. of lessons per week')),
                ('lesson_last', models.CharField(blank=True, max_length=30, null=True, verbose_name='Actual no. of hours per lesson:(hours)')),
                ('lesson_price', models.CharField(blank=True, max_length=30, null=True, verbose_name='Hourly Fee')),
                ('successful_match', models.BooleanField(default=False, verbose_name='Successful Match')),
                ('commission_collection_status', models.BooleanField(default=False, verbose_name='Commission Collection Status')),
                ('person_in_charge', models.CharField(blank=True, max_length=20, null=True, verbose_name='Person in Charge')),
                ('failed', models.BooleanField(default=False, verbose_name='Failed')),
                ('close_call_date', models.DateField(blank=True, null=True, verbose_name='Close call date')),
                ('tuition_duration', models.CharField(blank=True, max_length=20, null=True, verbose_name='Tuition frequency and duration')),
                ('overall_comment', models.CharField(choices=[('1', '1 Star'), ('2', '2 Star'), ('3', '3 Star'), ('4', '4 Star'), ('5', '5 Star')], default='1', max_length=10, null=True, verbose_name='Overall comment on the tutor')),
                ('q1', models.TextField(blank=True, null=True, verbose_name='Q1:What strength or wakness do you think your tutor has regarding the lessons?')),
                ('q2', models.TextField(blank=True, null=True, verbose_name='Q2:Anything you would like to complement or complain on your tutor in particular?')),
                ('self_evaluation', models.CharField(choices=[('1', '1 Star'), ('2', '2 Star'), ('3', '3 Star'), ('4', '4 Star'), ('5', '5 Star')], default='1', max_length=10, null=True, verbose_name='Tuition effect self-evaluation')),
                ('reasons', models.TextField(blank=True, null=True, verbose_name='If feel no improvement, why?')),
                ('comment_charges', models.TextField(blank=True, null=True, verbose_name='Comment on our charges')),
                ('recommend_or_not', models.CharField(choices=[('Yes', 'Yes'), ('Maybe', 'Maybe'), ('No', 'No')], default='Yes', max_length=10, null=True, verbose_name='Will he or she recommend us to his or her friend?')),
            ],
        ),
        migrations.CreateModel(
            name='StudentPreferSub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('rank', models.IntegerField(editable=False)),
                ('other', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prefer_subs', related_query_name='prefer_sub', to='myAuth.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30, verbose_name='username')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('full_name', models.CharField(max_length=100, verbose_name='name')),
                ('gender', models.CharField(max_length=6, verbose_name='gender')),
                ('birth', models.CharField(max_length=12, verbose_name='birthday')),
                ('email', models.CharField(max_length=40, verbose_name='email address')),
                ('phone', models.CharField(max_length=20, verbose_name='phone number')),
                ('school', models.CharField(max_length=50, verbose_name='school')),
                ('wechat', models.CharField(blank=True, max_length=30, null=True)),
                ('whatsapp', models.CharField(blank=True, max_length=30, null=True)),
                ('photo', models.ImageField(default='default_photo.jpg', upload_to='photos', verbose_name='photo')),
                ('signup_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Signup date')),
                ('last_edit_time', models.DateTimeField(auto_now=True, verbose_name='Last modified ')),
                ('check', models.BooleanField(default=False, verbose_name='if checked?')),
                ('top_teacher', models.BooleanField(default=False, verbose_name='if top tutors?')),
                ('tutor_location1', models.CharField(default='not chosen', max_length=30)),
                ('tutor_location2', models.CharField(blank=True, default='not chosen', max_length=30, null=True)),
                ('tutor_location3', models.CharField(blank=True, default='not chosen', max_length=30, null=True)),
                ('teach_duration', models.CharField(max_length=12, verbose_name='experience')),
                ('num_taught', models.CharField(max_length=10, verbose_name='Amount of students have taught')),
                ('achievement', models.TextField(blank=True, null=True)),
                ('isr', models.FloatField(default=0)),
                ('sr', models.FloatField(default=0, verbose_name='Star rating')),
                ('interview_result', models.FloatField(default=0)),
                ('base_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['username', 'sr'],
            },
        ),
        migrations.AddField(
            model_name='studentintent',
            name='final_tutor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matched_intent', to='myAuth.Tutor', verbose_name='Matched tutor'),
        ),
        migrations.AddField(
            model_name='studentintent',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intents', related_query_name='intent_set', to='myAuth.Student'),
        ),
        migrations.AddField(
            model_name='student',
            name='tutors_chosen',
            field=models.ManyToManyField(to='myAuth.Tutor'),
        ),
        migrations.AddField(
            model_name='refersubject',
            name='tutor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refer_subs', related_query_name='refer_sub', to='myAuth.Tutor'),
        ),
        migrations.AddField(
            model_name='prefersubject',
            name='tutor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prefer_subs', related_query_name='prefer_sub', to='myAuth.Tutor'),
        ),
        migrations.AddField(
            model_name='optionaltutor',
            name='record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myAuth.StudentIntent'),
        ),
        migrations.AddField(
            model_name='optionaltutor',
            name='tutor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myAuth.Tutor'),
        ),
        migrations.AddField(
            model_name='interview',
            name='tutor',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='myAuth.Tutor'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='record',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='myAuth.StudentIntent'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='myAuth.Student'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='tutor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='myAuth.Tutor'),
        ),
    ]
